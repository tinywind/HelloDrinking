=======================================================================
	mOverlayManager.clearOverlays();
	testPOIdataOverlay();

	mOverlayManager.clearOverlays();
	testFloatingPOIdataOverlay();
=======================================================================
	private void testPOIdataOverlay() {
		int markerId = NMapPOIflagType.PIN;
		// set POI data
		NMapPOIdata poiData = new NMapPOIdata(2, mMapViewerResourceProvider);
		poiData.beginPOIdata(2);
		poiData.addPOIitem(127.0630205, 37.5091300, "Pizza 777-111", markerId,0);
		poiData.addPOIitem(127.061, 37.51, "Pizza 123-456", markerId, 0);
		poiData.endPOIdata();
		// create POI data overlay
		NMapPOIdataOverlay poiDataOverlay = mOverlayManager.createPOIdataOverlay(poiData, null);
		// set event listener to the overlay
		poiDataOverlay.setOnStateChangeListener(onPOIdataStateChangeListener);
		// select an item
		poiDataOverlay.selectPOIitem(0, true);
		// show all POI data
		// poiDataOverlay.showAllPOIdata(0);
	}

	private void testFloatingPOIdataOverlay() {
		// Markers for POI item
		int marker1 = NMapPOIflagType.PIN;
		// set POI data
		NMapPOIdata poiData = new NMapPOIdata(1, mMapViewerResourceProvider);
		poiData.beginPOIdata(1);
		NMapPOIitem item = poiData.addPOIitem(null, "Touch & Drag to Move",marker1, 0);
		if (item != null) {
			// initialize location to the center of the map view.
			item.setPoint(mMapController.getMapCenter());
			// set floating mode
			item.setFloatingMode(NMapPOIitem.FLOATING_TOUCH	| NMapPOIitem.FLOATING_DRAG);
			// show right button on callout
			item.setRightButton(true);
			mFloatingPOIitem = item;
		}
		poiData.endPOIdata();
		// create POI data overlay
		NMapPOIdataOverlay poiDataOverlay = mOverlayManager.createPOIdataOverlay(poiData, null);
		if (poiDataOverlay != null) {
			poiDataOverlay.setOnFloatingItemChangeListener(onPOIdataFloatingItemChangeListener);
			// set event listener to the overlay
			poiDataOverlay.setOnStateChangeListener(onPOIdataStateChangeListener);
			poiDataOverlay.selectPOIitem(0, false);
			mFloatingPOIdataOverlay = poiDataOverlay;
		}
	}
	
===========================================================================================

	/* POI data State Change Listener */
	private final NMapPOIdataOverlay.OnStateChangeListener onPOIdataStateChangeListener = new NMapPOIdataOverlay.OnStateChangeListener() {
		public void onCalloutClick(NMapPOIdataOverlay poiDataOverlay,NMapPOIitem item) {
			if (DEBUG) {
				Log.i(LOG_TAG, "onCalloutClick: title=" + item.getTitle());
			}
			// [[TEMP]] handle a click event of the callout
			Toast.makeText(MapActivity.this,"onCalloutClick: " + item.getTitle(), Toast.LENGTH_LONG).show();
		}

		public void onFocusChanged(NMapPOIdataOverlay poiDataOverlay,NMapPOIitem item) {
			if (DEBUG) {
				if (item != null) {
					Log.i(LOG_TAG, "onFocusChanged: " + item.toString());
				} else {
					Log.i(LOG_TAG, "onFocusChanged: ");
				}
			}
		}
	};

	private final NMapPOIdataOverlay.OnFloatingItemChangeListener onPOIdataFloatingItemChangeListener = new NMapPOIdataOverlay.OnFloatingItemChangeListener() {
		public void onPointChanged(NMapPOIdataOverlay poiDataOverlay,NMapPOIitem item) {
			NGeoPoint point = item.getPoint();
			if (DEBUG) {
				Log.i(LOG_TAG, "onPointChanged: point=" + point.toString());
			}
			findPlacemarkAtLocation(point.longitude, point.latitude);
			item.setTitle(null);
		}
	};